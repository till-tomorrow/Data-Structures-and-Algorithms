#include <iostream>
#include <fstream>
#include <vector>
#include <queue>

using namespace std;

#define NMAX 100
#define INF 100000
vector<pair<int, int> > G[NMAX];

int d[NMAX];
int N, M;

void Dijkstra(int sursa) {

    int i, j;
    pair<int, int> u;
    
    priority_queue <pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > Q;
   
    for(i = 1; i <= N; i ++)
        d[i] = INF;
    d[sursa] = 0;
    Q.push(make_pair(0, sursa));
              
    while(!Q.empty()) {
        u = Q.top();
        Q.pop();
       
        for(i = 0; i < G[u.second].size(); i ++) {
           
            
            if( d[G[u.second][i].second] > d[u.second] + G[u.second][i].first) {
                d[G[u.second][i].second] = d[u.second] + G[u.second][i].first;
                 Q.push(G[u.second][i]);
            }
        }
   }
   
}    
         
int main(){

    int i, j;
    int x, y, c;
    
    int start;
    ifstream in("in1.txt");
    
    in >> N >> M;
    for(i = 1; i <= M; i ++) {
        in >> x >> y >> c;
        G[x].push_back(make_pair(c, y));
    }
        
    // in >> start;    
    start = 1;
    
    Dijkstra(start);
    
    for(i = 1; i <= N; i ++)
        cout << d[i] << " ";
     
    cout << "\n";
        
    return 0;
}
