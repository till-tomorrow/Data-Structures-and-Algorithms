#include <iostream>
#include <fstream>
#include <vector>
#include <queue>

using namespace std;

#define NMAX 100
#define INF 100000
vector<pair<int, int> > G[NMAX];

vector<pair <pair <int, int>, int > > Edges; 

int d[NMAX];
int N, M;

void Bellman(int sursa) {

    int i, j;
    pair<int, int> u;
    
    priority_queue <pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > Q;
   
    // std::fill(d.begin(), d.end(), INF);
    for(i = 1; i <= N; i ++)
        d[i] = INF;
    d[sursa] = 0;
    Q.push(make_pair(0, sursa));
              
   for(i = 1; i <= N-2; i ++) {
        for(pair<pair <int, int>, int> m : Edges) {
            pair<int, int> edge = m.first;
            int cost = m.second;
            
            if(d[edge.second] > d[edge.first] + cost)
                d[edge.second] = d[edge.first] + cost;
            
            }
            
   }
   
        for(pair<pair <int, int>, int> m : Edges) {
            pair<int, int> edge = m.first;
            int cost = m.second;
            
            if(d[edge.second] > d[edge.first] + cost)
                cout << "Ciclu negativ\n";
            
            }
           
   
}    

int main(){

    int i, j;
    int x, y, c;
    
    int start;
    
    ifstream in("in1.txt");
    
    in >> N >> M;
    for(i = 1; i <= M; i ++) {
        in >> x >> y >> c;
        Edges.push_back(make_pair(make_pair(x,y), c));
        }
    
    start = 1;
    
    Bellman(start);
        
    return 0;
}
